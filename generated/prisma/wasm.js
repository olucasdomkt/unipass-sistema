
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.10.1
 * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
 */
Prisma.prismaVersion = {
  client: "6.10.1",
  engine: "9b628578b3b7cae625e8c927178f15a170e74a9c"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ClienteScalarFieldEnum = {
  id: 'id',
  nome: 'nome',
  email: 'email',
  telefone: 'telefone',
  ativo: 'ativo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ColaboradorScalarFieldEnum = {
  id: 'id',
  nome: 'nome',
  email: 'email',
  cargo: 'cargo',
  status: 'status',
  dataEntrada: 'dataEntrada',
  dataSaida: 'dataSaida',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlataformaScalarFieldEnum = {
  id: 'id',
  nome: 'nome',
  tipo: 'tipo',
  urlLogin: 'urlLogin',
  emailUtilizado: 'emailUtilizado',
  senhaEncriptada: 'senhaEncriptada',
  custoMensal: 'custoMensal',
  ultimaAtualizacaoSenha: 'ultimaAtualizacaoSenha',
  frequenciaAtualizacao: 'frequenciaAtualizacao',
  observacoes: 'observacoes',
  vinculo: 'vinculo',
  clienteId: 'clienteId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AcessoPlataformaScalarFieldEnum = {
  id: 'id',
  colaboradorId: 'colaboradorId',
  plataformaId: 'plataformaId',
  dataInicio: 'dataInicio',
  dataFim: 'dataFim',
  ativo: 'ativo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HistoricoSenhaScalarFieldEnum = {
  id: 'id',
  plataformaId: 'plataformaId',
  colaboradorId: 'colaboradorId',
  senhaAnterior: 'senhaAnterior',
  novaSenha: 'novaSenha',
  motivoMudanca: 'motivoMudanca',
  dataAlteracao: 'dataAlteracao',
  notificouColaboradores: 'notificouColaboradores',
  tipoNotificacao: 'tipoNotificacao'
};

exports.Prisma.VisualizacaoSenhaScalarFieldEnum = {
  id: 'id',
  plataformaId: 'plataformaId',
  colaboradorId: 'colaboradorId',
  dataVisualizacao: 'dataVisualizacao',
  ip: 'ip',
  userAgent: 'userAgent'
};

exports.Prisma.TicketSenhaScalarFieldEnum = {
  id: 'id',
  plataformaId: 'plataformaId',
  colaboradorId: 'colaboradorId',
  descricaoProblema: 'descricaoProblema',
  status: 'status',
  dataAbertura: 'dataAbertura',
  dataResolucao: 'dataResolucao',
  observacoesResolucao: 'observacoesResolucao'
};

exports.Prisma.CustoPlataformaScalarFieldEnum = {
  id: 'id',
  plataformaId: 'plataformaId',
  valor: 'valor',
  moeda: 'moeda',
  dataInicio: 'dataInicio',
  dataFim: 'dataFim',
  ativo: 'ativo',
  observacoes: 'observacoes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConfiguracaoSistemaScalarFieldEnum = {
  id: 'id',
  chaveMestre: 'chaveMestre',
  webhookClickup: 'webhookClickup',
  webhookDiscord: 'webhookDiscord',
  emailAlertas: 'emailAlertas',
  apiKeyEmail: 'apiKeyEmail',
  diasAvisoExpiracao: 'diasAvisoExpiracao',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LogAcessoScalarFieldEnum = {
  id: 'id',
  usuario: 'usuario',
  acao: 'acao',
  entidade: 'entidade',
  entidadeId: 'entidadeId',
  ip: 'ip',
  userAgent: 'userAgent',
  timestamp: 'timestamp'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.StatusColaborador = exports.$Enums.StatusColaborador = {
  ATIVO: 'ATIVO',
  DEMITIDO: 'DEMITIDO',
  SUSPENSO: 'SUSPENSO'
};

exports.TipoPlataforma = exports.$Enums.TipoPlataforma = {
  MIDIA: 'MIDIA',
  CRM: 'CRM',
  DOMINIO: 'DOMINIO',
  EMAIL: 'EMAIL',
  DESIGN: 'DESIGN',
  GESTAO: 'GESTAO',
  ANALISE: 'ANALISE',
  HOSPEDAGEM: 'HOSPEDAGEM',
  OUTROS: 'OUTROS'
};

exports.VinculoPlataforma = exports.$Enums.VinculoPlataforma = {
  UNICO: 'UNICO',
  CLIENTE: 'CLIENTE'
};

exports.StatusTicket = exports.$Enums.StatusTicket = {
  ABERTO: 'ABERTO',
  EM_ANDAMENTO: 'EM_ANDAMENTO',
  RESOLVIDO: 'RESOLVIDO',
  CANCELADO: 'CANCELADO'
};

exports.Prisma.ModelName = {
  Cliente: 'Cliente',
  Colaborador: 'Colaborador',
  Plataforma: 'Plataforma',
  AcessoPlataforma: 'AcessoPlataforma',
  HistoricoSenha: 'HistoricoSenha',
  VisualizacaoSenha: 'VisualizacaoSenha',
  TicketSenha: 'TicketSenha',
  CustoPlataforma: 'CustoPlataforma',
  ConfiguracaoSistema: 'ConfiguracaoSistema',
  LogAcesso: 'LogAcesso'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
